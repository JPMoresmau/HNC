 -- Модуль вывода типов
ATTR ASTExpression ExpressionList Definition LetIn
	[
		generalizedTypes : {M.Map String GType}

		finalSubstitution : {MyStack ()}
	|
		counter : Int
	|
		sM USE {>>} {return ()} : {MyStack ()}
	]

ATTR ASTExpression Definition LetIn
	[
	|
	|
		tau : T
	]

{
type GType = (S.Set String, T)
}

ATTR Definition
	[
	|
	|
 		generalizedType : GType
	]

ATTR ExpressionList
	[
	|
	|
		tau USE {:} {[]} : {[T]}
	]

SEM Definition
	| Definition
		-- arguments get fresh type variables
		(where.counter, loc.argAtoms) = freshAtoms @params @lhs.counter

		loc.tau = { if null @params
			then @where.tau
			else TT $ map snd  @argAtoms ++ [@where.tau]
		}
		where.generalizedTypes = M.union (M.map (\t -> (S.empty, t)) $ M.fromList @loc.argAtoms) @lhs.generalizedTypes

		-- definitionType - "исправленные" типы, содержащих
		-- non-generic type variables (термин Карделли)
		-- такие "необобщенные типовые переменные" возникают, если в результате
		-- анализа тела определения получается, что свободная переменная может
		-- иметь любой тип:
		-- let x = 2 in y = i
		-- для терма "i" алгоритм W выводит _МОНОТИП_ вида t324, где t324 - свободная
		-- типовая переменная. В противоположность политипу вида forall t324 . t324,
		-- в котором t324 - связанная типовая переменная
		--
		-- связывание типовых переменных с помощью квантификатора выполняет функция
		-- closure (термин Милнера), принимающая тип и типовое окружение и
		-- возвращающая тип, в котором некоторые типовые переменные квантифицированы
		--
		-- По историческим причинам вместо явных кванторов forall используются два вида
		-- типовых переменных - TV для неквантифицированных и TU для квантифицированных
		-- (описано в SPL.Types.T). Благо из-за shallow types квантор может находиться
		-- только в одном месте - в начале политипа
		--
		-- TU используются очень ограниченно - в MilnerTools.closure создаются, а в
		-- MilnerClosure.instantiatedType уничтожаются (introduction/elimination)
		--

		loc.definitionType = {
			xtrace "DefinitionType" $ runStack $ fmap (addTU @loc.templateArgs) $ do
				foo <- @loc.xgeneralizedType
				@lhs.finalSubstitution >> subst (snd foo)
		}

		-- generalizedType используется алгоритмом W _ДО_ того, как создается finalSubstitution
		loc.generalizedType = runStack @loc.xgeneralizedType
		loc.xgeneralizedType = @where.sM >> closureM @lhs.generalizedTypes @loc.tau

SEM LetIn
	| Let
		tl.generalizedTypes = M.insert @hd.name @hd.generalizedType @lhs.generalizedTypes

SEM ASTExpression
	| Constant
		lhs.tau = constantType @c
	| Atom
		(lhs.counter, loc.tau) = xtrace "atom.tau" $ lookupAndInstantiate @name @lhs.generalizedTypes @lhs.counter

		-- дополнительно к Милнеровским s и tau, вычисляются
		-- * definitionType - тип атома в месте определения
		-- * callSiteType - тип атома в месте использования
		-- Унификацией этих типов можно найти фактические шаблонные
		-- аргументы
		-- Например:
		-- print имеет в месте определения   inferredType =   a -> IO void,
 		-- а в некотором месте использования callSiteType = int -> IO void.
 		--
		-- Унификацией этих типов можно найти значение a в месте использования,
 		-- и явно указать его шаблонным аргументом: print<int>(2 + x), если
		-- это требует система типов С++ ("компилятор С++ не может вывести тип").

		loc.templateArgs = runStack $ @lhs.finalSubstitution >> templateArgs @loc.tau (tracedUncondLookup "Atom.definitionType" @name @lhs.generalizedTypes)

	| Application
		fn.counter = @lhs.counter + 1
		loc.beta = tv @lhs.counter
		lhs.tau = @loc.beta
		lhs.sM = @fn.sM >> @arg.sM >> unifyM @fn.tau (TT $ @arg.tau ++ [@loc.beta]) >> return ()
